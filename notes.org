* Cloud Fundamentals
** What defines Cloud Computing?
   - On-Demand Self-Service
     Provision and terminate using a UI/CLI without human interaction
   - Broad Network Access
     Access services over any networks, on any devices, using standard
     protocols and methods
   - Resource Pooling
     Economies of scale, cheaper service
   - Rapid Elasticity
     Scale up and down automatically in response to system load
   - Mesured Service
     Usage is measured. Pay for what you consume

** Public vs Private vs Multi vs Hybrid
   - Public Cloud :: using *1* public cloud
   - Private Cloud :: using on-premises *real* cloud
   - Multi-Cloud :: using *more than 1* public cloud
   - Hybrid Cloud :: *Public* and *Private* clouds    

      /Note/: Hybrid Cloud is *NOT* public cloud + legacy on-premises

** Service Models (Cloud Service Models)
   - An Infrastructure Stack is a collection of things which that
     application needs
     - Application
     - Data
     - Runtime
     - Container
     - O/S
     - Virtualization
     - Servers
     - Infrastructre
     - Facilities
   - For every service and application there is a part of
     the stack that is managed by you and part that is managed
     by the provider
   - Unit of Consumpution is what you pay for and consume. It's the
     part of the system where from that point upwards in the
     infrastructure stack, you are responsible for managmement
     
** Infrastructure and Resiliency
   
   Services can be described as having one of three resiliency types
   - Global Resilience
     - A service that operates globally with a single database. It's one
       product and it's data is replicated across multiple regions inside
       AWS (ex. IAM, Route53)
   - Regional Resilience
     - Services which operate in a single region with one set of data per region
       - If the region fails, then the entire service fails
   - Zone Resilience
     Services run from a single Availability Zone

     - The AWS Global Infrastructure is divided into
     - AWS Regions
       These are full deployments of AWS infrastructure
     - AWS Edge Locations
       - Smaller than regions
       - Content Distribution Services
       - Some types of Edge Computing
       - Many more locations

   - Global Services don't reside in a region so you don't choose one
     in the dropdown

   - Region Benefits
     - Geographically Separate
       This provides isolated fault tolerance
     - Geopolitical Separations
       Difference governance
     - Locaton Control(performance)

   - Naming Examples
     - Region Name Example: Asia Pacific (Sydney)  
     - Region Code Example: =ap-southeast-2=
     - Availability Zone:   =ap-southeast-2a=, =ap-southeast-2b=

   - Availability Zones
     - Each region contains multiple (2 or more) AZs
     - AZs provide isolated infrastructure inside a region
       - Isolated compute, storage, networking, power, and facilities
     - High-speed low-latency across AZs
     - VPCs can span across AZs to provide resiliency


* Networking

** Domain Name System (DNS)

   DNS is a discovery service that translates domain names into IP
   addresses.

*** Things to remember
    - DNS Client :: The device or thing (i.e. laptop, phone) which wants
      the data that DNS has, which is an IP address
    - DNS Resolver :: Queries the DNS system on your behalf
    - Zone :: Part of the DNS database (e.g. amazon.com)
    - Zonefile :: Physical database for a zone
    - DNS Nameserver :: Server which hosts the Zonefile
    - Root Hints :: Contains a list of all DNS root servers. It is
      provided by the OS vender
    - Root Server :: The root server is what hosts the DNS Root Zone.
      There are 13 root servers ran by 12 companies (VeriSign has two)
    - Root Zone :: Database that has the authoritative list of all
      the top-level domains. The Root Zone is managed by IANA
    - gTLD :: Generic top-level domain (.com .org)
    - ccTLD :: Country-code top level domain (.uk .eu)

*** The Goal Process of DNS
    1. DNS Client queries the Resolver server
    2. Resolver server needs to locate the correct name server
       for the given zone
    3. Resolver server queries that name server
    4. Data is retrieved from the name server
    5. The Resolver passes the data back to the DNS Client

*** DNS Record Types
    - Nameserver (NS) :: Identifies the name servers responsible for
      your DNS zone.
    - A and AAAA :: Map Hostnames to IP Addresses.
      - A record maps to an IPv4 address
      - AAAA record maps to an IPV6 address
    - CNAME :: Host-to-host records. For a given zone, the CNAME record type lets you create
      the equivalent of DNS shortcuts
      - CNAME ftp > server: 172.217.25.36 (A record since IPv4)
      - CNAME mail > server: 172.217.25.36
      - CNAME www > server: 172.217.25.36
      - *NOTE*: CNAMEs /cannot/ point to IP addresses, only other names

    | Host                  | Type  | Points to:        | TTL    |
    | panel.cloudns.net     | A     | 185.107.80.223    | 1 Hour |
    | www.panel.cloudns.net | CNAME | panel.cloudns.net | 1 Hour |
    
    - MX :: Find a mail server (SMTP) for a domain
    - TXT :: Allows you to add arbitrary text to a domain. One reason for this
      is to be able to prove ownership for a domain

*** Time-To-Live (TTL)
    - TTL :: Time to live (TTL) is what dictates how long your records
      stay cached. For example, for how long your A record will be
      cached before the retreival of a new copy of the record from DNS
      servers.


* AWS Features
   
** High-Availability vs Fault-Tolerance vs Disaster Recovery

   - High-Availability :: Maximizing uptime
   - Fault Tolerance :: Operating through failure
   - Disaster Recovery :: Used when these don't work. Keeps the
     crucial and non-replaceable parts of your system safe so that
     when a disaster occurs, you don't lose anything irreplaceable and
     can rebuild after the disaster
   

** AWS Public vs Private Services
  - Public Cloud :: using *1* public cloud
  - Private Cloud :: using on-premises *real* cloud
  - Multi-Cloud :: using *more than 1* public cloud
  - Hybrid Cloud :: *Public* and *Private* clouds    

  /Note/: Hybrid Cloud is *NOT* public cloud + legacy on-premises

** AWS Global Infrastructure
  Services can be described as having one of three resiliency types
  - Global Resilience
    - A service that operates globally with a single database. It's one
      product and it's data is replicated across multiple regions inside
      AWS (ex. IAM, Route53)
  - Regional Resilience
    - Services which operate in a single region with one set of data
      per region
      - If the region fails, then the entire service fails
  - Zone Resilience
    Services run from a single Availability Zone

  - The AWS Global Infrastructure is divided into
    - AWS Regions
      These are full deployments of AWS infrastructure
    - AWS Edge Locations
      - Smaller than regions
      - Content Distribution Services
      - Some types of Edge Computing
      - Many more locations

  - Global Services don't reside in a region so you don't choose one
    in the dropdown

  - Region Benefits
    - Geographically Separate
      This provides isolated fault tolerance
    - Geopolitical Separations
      Difference governance
    - Locaton Control(performance)

  - Naming Examples
    - Region Name Example: Asia Pacific (Sydney)  
    - Region Code Example: =ap-southeast-2=
    - Availability Zone:   =ap-southeast-2a=, =ap-southeast-2b=

  - Availability Zones
    - Each region contains multiple (2 or more) AZs
    - AZs provide isolated infrastructure inside a region
      - Isolated compute, storage, networking, power, and facilities
    - High-speed low-latency across AZs
    - VPCs can span across AZs to provide resiliency
      

* IAM, Accounts, and Organizations

  - IAM Policy :: A set of security statements in AWS that grants or
    denies access to AWS products and features for any identity which
    uses that policy
  - Identities :: IAM Users, IAM Groups, IAM Roles
  - IAM Users :: An identity used for anything requiring long-term
    AWS access (e.g. humans, applications, service accounts)
  - Principle :: Represents an identity trying to access an AWS account
  - Authentication :: Process where the Principal proves to IAM that it
    is an identity that it claims to be
  - Authorization :: Authorization is IAM checking the statements that
    apply to that identity and either allowing or denying that access
  - Authenticated Identity :: Authentication is how a Principal can
    prove to IAM that it is the identity that it claims to be using
    Username and Password or Access Keys
  - Amazon Resource Name :: Uniquely identifies resources within any
    AWS accounts

*** IAM Policy Documents  
    IAM Policy documents are a collection of Statements. These statements
    are what grant or deny access.

    - Statement ID (SID) :: /(optional)/ Lets you identify a statement
      and what it does
    - Effect :: Controls what AWS does if the action and the resource
      parts of the statement match the operation that you're attempting
      to do with AWS
    - Action :: Matches one or more specific actions
      Three types of actions
      - Specific individual action
      - Wildcard
      - List of multiple independent actions
    - Resource :: Matches one or more specific resources
    
    When there exists overlap of one or more statements, the way in which
    the access is determined is via the following logic
    1. Explicit DENY
    2. Explicit ALLOW
    3. Default DENY(implicit)

    AWS Identities start off with no access to AWS resources (Step 3
    above).  If they're not allowed access, they have no access.

    There are two types of IAM Policies
    1. Managed Policies
       - Reusable
       - Low Management Overhead
       - Should be used for the default, normal operational rights
         within your business
    2. Inline Policies 
       - These are used for special or exceptional ALLOY or DENY
         statements

    There are two main types of Managed Policies
    1. AWS Managed Policies
    2. Customer-Managed Policies


*** IAM User Limits
    - 5,000 IAM Users per account
    - IAM User can be a member of 10 groups
    

** IAM Groups

   - IAM Groups :: Containers for Users. They exist to make organizing
     large sets of IAM users easier
     - IAM Groups consist of Users and Permissions
     - *Note*: You cannot log in directly to a Group

*** Benefits of IAM Groups
    1. They allow effective administration style management
       of users (teams, projects, etc...)
    2. Groups can have policies attached to them, both Inline and
       Managed

*** Limitations of Groups
    1. No nesting - No groups within groups
    2. There is no concept of an *All Users* group. If you want all
       users added to a group (up to the 5,000 user limit) you would
       need to do that manually.
    3. No credentials, they cannot be logged into directly
    4. 300 Groups per AWS Account
    5. Groups are not a true identity. They can't be referenced as a
       principal in a policy (such as a Resource Policy), only IAM
       Users and Roles.
    

** IAM Roles

   - Role :: Something which represents a level of access inside
     an AWS Account. Short-term use by other identites

*** IAM Roles vs IAM Users

    IAM Users and IAM Roles are both identites but whereas IAM Users
    are used for single identites that require long-term access, IAM
    Roles are best suited for multiple or unknown numbers of
    principals.

    If you have more than 5,000 principals, because of the number limit
    of IAM Users, it could also be a candidate for IAM Roles

    Roles are something which is generally used on a temporary basis.
    Something becomes that role for a short period of time and then
    stops.

*** Permission Differences

    IAM Users get *Identity Permissions*
    - Managed
    - Inline

    IAM Roles get one of two types of policy
    - Trust Policy :: Which identities can assume that role
      - Any identites which are allowed via a Trust Policy are granted
        *Temporary Security Credentials* which are similar to Access
        Keys but are time-limited. Once expired the identity needs to
        /re-assume/ the role which will generate a /new/ pair of
        temporary security credentials.
    - Permission Policy :: Defines what permissions are granted to
      the temporary credentials
    - sts:AssumeRole :: =sts= or the Secure Token Service is the service
      that generates the temporary credentials. =sts:AssumeRole= is the
      service that then assumes this role. 
    

** When To Use Roles

*** AWS Services
**** Automated Temporary Permissions

     Services such as AWS Lambda. It has no AWS permissions so it
     needs some way to get permissions. Roles allow the granting of
     permisisons policies using the =sts:AssumeRole= function which
     handles temporary security credentials.

     If you didn't use a role you'd have to hard code permissions into
     the Lambda function. This is a) security risk and b) it causes
     issues if you ever need to change or rotate those access keys.

     It's always better for AWS products and services where possible
     to use a role because when a role is assumed it provides a
     temporary set of credentials with enough time to complete a task
     and then the credentials are discarded.

**** Circumventing IAM User Limits

     Because you don't know how many copies of a service will be
     spawned you can't be sure that the number will remain below the
     IAM User limits.

*** Emergency (Break Glass) Situations
    In the event of an emergency a user who otherwise has more restrictive
    permissions can /assume/ a role with elevated permissions for a short
    time. This activity will be logged.

*** When Adding AWS into an Existing Corporate Environment
    
    Roles are often used when you want to reuse your existing
    identites for use within AWS (e.g. Active Directory integration,
    Facebook, Twitter)
    - External accounts or external identites cannot be used directly
      to access AWS resources
    - When integrating with things like Active Directory, you may have
      more than 5000 identities.

    The benefits of using Roles for external accounts
    - No AWS credentials on the app. If the external application is
      compromised, the AWS Credentials will not be exposed
    - Uses existing customer logins
    - Scales to millions of accounts (think mobile applications)

*** Cross-Account Access

    Accounts can access each other's AWS Services without having to
    create matching Partner account identites for each identity in
    your own account.
     

** AWS Organizations

   - A standard account is an account that is not a part of an
     organization
   - A standard account is used to create an orgaznization
   - The organization doesn't exist within the AWS account itself
   - When standard AWS accounts join an organization, they change from
     being standard accounts to being memeber accounts of that
     organization
   - Master accounts are the legacy name for Management accounts
   - Management accounts have
     - Only one managmeent account
     - 0 or more member accounts
   - The Organization Root account is just a container within
     an AWS Organization which contain AWS accounts, both member
     accounts and management accounts
     - The Organization Root can also be a container for other
       containers called Organization Units or OUs
   - Organizations are what enable consolidated billing. The payment
     method associatied with the member accounts points to the payment
     method on file for the Management account.
     - *Note*: This is sometimes referred to as the Payer Account
   - Usage of organizations also allows for volume discounts.

     
** Service Control Policies

   - Policy document that defines the account permission boundries
   - SCPs don't grant any permissions, they are just a boundry. They
     define the limit of what is, and isn't allowed within the
     account. You still need to give identites within that AWS account
     permissions to AWS resources but any SCPs will limit the
     permissions that can be assigned to individual identites
   - Can be attached to the top-level organization, any organizational
     units(OUs), and individual AWS accounts
     - SCPs inherit down the organization tree
   - The Management account is /never/ limited by SCPs attached to
     that account either directly or indirectly
   - The Account Root User is indirectly affected by SCPs. The root
     user can't be directly limited but the SCP can apply to the
     account itself and any identites under that account which in turn
     affects the root user

*** Allow List vs Deny List

    - Allow List :: Block by default and allow certain services
    - Deny List :: (/default/) Allow by default and block certain services
    - The effective permsissions for an account are the overlap between
      any identity policies and any applicable SCPs.

*** CloudWatch Logs

    - Public Service - usable from AWS or on-premises
    - Store, monitor, and access logging data
    - AWS Integrations - EC2, VPC Flow Logs, Lambda, etc...
    - Metric Filter - Can generate metrics based on logs
    - Log Event - The way in which services inject data into
      CloudWatch Logs
      - Format: =YYYYMMDD MESSAGE=
    - Log Stream - Each log stream is an ordered set of log events for
      a specific source for a specific thing
    - Log Groups - Containers for multiple log streams, for the same
      type of logging
      - Log Groups also store configuration settins such as retention
        settings and permissions
      - Log Groups also store Metric Filters

	
   
** Cloud Trail
   - Regional Service
   - Not realtime
   - Logs API call/activites as a CloudTrail Event
   - CloudTrail Event - A record of an activity in an AWS account
   - 90 stored by default in Event History. 
     - Enabled by default - no cost for 90 day history. No S3 storage
   - Trails are how you configure S3 and CWLogs
   - CloudTrail Events can be one of two types, only one of which,
     Management Events, are logged by default
     - Management Events - (Control Plane Operations) provide
       information about management operations that are performed on
       resources in your AWS account (ex. creating/terminating an instance,
       creating a VPC)
     - Data Events - contain information about resource operations
       performed on or in a resource (ex. objects being uploaded to
       S3, objects being access from Ss3, when Lambda functions are
       being invoked)
   - IAM, STS, CloudFront => Global Service Events
     - Global Service Events get logged to =us-east-1=
   

* Default Virtual Public Cloud (VPC)
 
** VPC CIDR
   - Defines the start and end IP range that a VPC can use
   - If anything needs to communicate with a VPC, and assuming
     you allow it, it needs to communicate to that VPC CIDR
   - Custom VPC can have multipe CIDR ranges whereas the VPC CIDR
     for the Default VPC is always the same: 172.31.0.0/16
   - The VPC CIDR is divide up so that each subnet per AZ gets
     a slice of the CIDR range
     - A /20 subnet is created within each AZ within the region
     - 16 /20 subnets can be created from a /16 address. That means
       that the Default VPC CIDR can handle up to 16 AZs
       
** Default VPC
   - One per region - can be removed and recreated so it's possible to
     not have a Default VPC if it has been deleted
   - Default VPC is always the same: 172.31.0.0/16
   - The Default VPC is configured which means that it is always have
     the same predictable structure but this structure can't be
     changed which makes Default VPCs limited for any production
     deployments
   - Each Default VPC automatically gets the following security features
     which limit incoming and outgoing data transfer
     - Internet Gateway(IGW)
     - Security Group(SG)
     - Network Access Control List(NACL)
   - Anything placed in the Default VPC subnets is assigned a public IPv4
     address. This is an example of how some private services can be made
     public by projecting parts of themselves into the AWS public zone(see
     Public
      
** Custom VPC
   - Multiple VPCs per region
   - Can be configured how you want, so long as you stay within the
   - rules and limits of VPC
   - Require the user to configure them end-to-end and are private
     by default
   - Can be configured for exactly how you need
     - variety of sizes and structures
     - they can be linked with other VPCs
     - can be configured to communicate with other cloud platforms
       and your on-premises networks


* Elastic Compute Cloud (EC2)
** EC2 Facts
  - Provides access to virtual machines called instances
  - Infrastructure as a Service (IAAS)
    - Unit of consumption is the instance
  - Instance :: An operation system configured in a certain way
    with a certain set of allocated resources
  - EC2 is a private service
    - It runs in the private AWS zone
    - Instances are launched within a single VPC subnet
    - It must be configured with public access due to it being a
      private service. This is done by putting it in a VPC subnet that
      supports VPC access. The default VPC supports this out of the
      box. Custom VPCs need to be configured
  - EC2 is AZ Resilient
    This is evident since it is launched within a specific subnet
    and subnets are are availability zones
  - On-demand billing per-second or per-hour based on the service
    consumed

** Instance charges
   - Running an instance (CPU and memory usage) 
   - Storage
   - Extras for any commercial software the instances is launched with

** Storage
   Instances can use a number of different storage. Two of which are
   - Local host storage
   - Elastic Block Storage(EBS)

** Instance Lifecycle
   States
   - Running
   - Stopped
   - Terminated
      
   | State      | CPU | Memory | Storage | Networking |
   |------------+-----+--------+---------+------------|
   | Running    | X   | X      | X       | X          |
   | Stopped    |     |        | X       |            |
   | Terminated |     |        |         |            |

** Amazon Machine Image (AMI)
   - An AMI can create an EC2 instance and,
   - An AMI can be created /from/ an EC2 instance

   An AMI contains
   - Permissions :: Control which accounts can use the AMI
     - Public: Everyone is allowed to launch instances from that AMI
     - Owner: Implicitly allowed to create EC2 instance from the AMI
     - Explicit: Owner specifies which /AWS accounts/ have access to
       the AMI
   - Root Volume :: Boot volume for the instance along with any other
     drives
   - Block Device Mapping :: Configuration which maps the drives to the
     device ID

** Connecting to EC2
   - Windows - RDP =port: 3389=
   - Linux - SSH =port: 22=

     
* Simple Storage Service (S3)
  - Global storage platform
  - Regionally Resilient: Data is replicated across availability
     zones within that region
  - Runs from the AWS Public Service
  - It can cope with unlimited data
  - Designed for multi-user usage
  - Two main things it delivers
    - Objects
    - Buckets
  - S3 is an object store, not a file or block store
  - Input and/or output to many AWS prodcut
  

* CloudFormation (CFN)

  - CloudFormation is a tool that lets you create, update, and delete
    infrastructure in AWS in a consistent and repeatable way using
    templates
  - Written in YAML or JSON
  - All templates must have a Resource key with at least one element
    - The Resource section is what dictates what is created, updated,
      and deleted
  - If the =AWSTemplateFormatVersion= and =Description= sections both
    exist then =Description= must be immediately after the
    =AWSTemplateFormationVersion=
  - Resources inside a CloudFormation template are called Logical
    Resources. They contain
    - Type
      (ex. =AWS::EC2::Instance=)
    - Properties
      Used to configure the resource in a certain way
  - A Stack is whats created when CloudFormation runs a template
  - 1 or more Stacks can be created from a single Template
  - For any logical resources in the stack, CloudFormation makes a
    corresponding physical resource in your AWS account
  - CloudFormation's job is to keep the logical and physical
    resources in sync

** Benefits
   - Consistently repeatable automatic provisioning
   - It cleans up after itself. When you delete a Stack CF deletes the
     logical resources and then deletes the associated physical
     resources
   - Portable. Well-designed templates can be used in any AWS region


* CloudWatch

  - CloudWatch :: An AWS public service that collects and manages
    operational data

  CloudWatch consists of three main products
  1. CloudWatch - Metrics
  2. CloudWatch Logs
  3. CloudWatch Events
  
  - Namespaces :: Used to keep data organized
    - AWS reserves the =AWS/...= namespace (ex. =AWS/EC2=)   
  - Metric :: A collection of related data points in a time-orderd
    structure
  - Datapoints :: consist of a timestamp (=2019-12-03T08:45:45Z=) and
    a value (=98.3=)
  - Dimensions :: Separate datapoints for different /things/ or
    /perspectives/ within the same metric
  - Alarms :: The service that allows actions to be configured /based
    on/ metrics
    - Three states: Ok, Alarm, Insufficent Data


* Route53
